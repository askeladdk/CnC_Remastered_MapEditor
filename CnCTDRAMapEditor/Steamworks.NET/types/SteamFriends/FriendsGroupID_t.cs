// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct FriendsGroupID_t : System.IEquatable<FriendsGroupID_t>, System.IComparable<FriendsGroupID_t> {
        public static readonly FriendsGroupID_t Invalid = new FriendsGroupID_t(-1);
        public short m_FriendsGroupID;

        public FriendsGroupID_t(short value) => this.m_FriendsGroupID = value;

        public override string ToString() => this.m_FriendsGroupID.ToString();

        public override bool Equals(object other) => other is FriendsGroupID_t && this == (FriendsGroupID_t)other;

        public override int GetHashCode() => this.m_FriendsGroupID.GetHashCode();

        public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y) => x.m_FriendsGroupID == y.m_FriendsGroupID;

        public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y) => !(x == y);

        public static explicit operator FriendsGroupID_t(short value) => new FriendsGroupID_t(value);

        public static explicit operator short(FriendsGroupID_t that) => that.m_FriendsGroupID;

        public bool Equals(FriendsGroupID_t other) => this.m_FriendsGroupID == other.m_FriendsGroupID;

        public int CompareTo(FriendsGroupID_t other) => this.m_FriendsGroupID.CompareTo(other.m_FriendsGroupID);
    }
}

#endif // !DISABLESTEAMWORKS
