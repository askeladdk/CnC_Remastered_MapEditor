// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct SNetListenSocket_t : System.IEquatable<SNetListenSocket_t>, System.IComparable<SNetListenSocket_t> {
        public uint m_SNetListenSocket;

        public SNetListenSocket_t(uint value) => this.m_SNetListenSocket = value;

        public override string ToString() => this.m_SNetListenSocket.ToString();

        public override bool Equals(object other) => other is SNetListenSocket_t && this == (SNetListenSocket_t)other;

        public override int GetHashCode() => this.m_SNetListenSocket.GetHashCode();

        public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y) => x.m_SNetListenSocket == y.m_SNetListenSocket;

        public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y) => !(x == y);

        public static explicit operator SNetListenSocket_t(uint value) => new SNetListenSocket_t(value);

        public static explicit operator uint(SNetListenSocket_t that) => that.m_SNetListenSocket;

        public bool Equals(SNetListenSocket_t other) => this.m_SNetListenSocket == other.m_SNetListenSocket;

        public int CompareTo(SNetListenSocket_t other) => this.m_SNetListenSocket.CompareTo(other.m_SNetListenSocket);
    }
}

#endif // !DISABLESTEAMWORKS
