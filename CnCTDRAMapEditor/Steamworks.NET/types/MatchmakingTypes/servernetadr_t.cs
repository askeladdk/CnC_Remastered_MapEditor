// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS


namespace Steamworks {
    // servernetadr_t is all the addressing info the serverbrowser needs to know about a game server,
    // namely: its IP, its connection port, and its query port.
    [System.Serializable]
    public struct servernetadr_t {
        private ushort m_usConnectionPort;  // (in HOST byte order)
        private ushort m_usQueryPort;
        private uint m_unIP;

        public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort) {
            this.m_unIP = ip;
            this.m_usQueryPort = usQueryPort;
            this.m_usConnectionPort = usConnectionPort;
        }

#if NETADR_H
		public netadr_t GetIPAndQueryPort() {
			return netadr_t( m_unIP, m_usQueryPort );
		}
#endif

        // Access the query port.
        public ushort GetQueryPort() => this.m_usQueryPort;

        public void SetQueryPort(ushort usPort) => this.m_usQueryPort = usPort;

        // Access the connection port.
        public ushort GetConnectionPort() => this.m_usConnectionPort;

        public void SetConnectionPort(ushort usPort) => this.m_usConnectionPort = usPort;

        // Access the IP
        public uint GetIP() => this.m_unIP;

        public void SetIP(uint unIP) => this.m_unIP = unIP;

        // This gets the 'a.b.c.d:port' string with the connection port (instead of the query port).
        public string GetConnectionAddressString() => ToString(this.m_unIP, this.m_usConnectionPort);

        public string GetQueryAddressString() => ToString(this.m_unIP, this.m_usQueryPort);

        public static string ToString(uint unIP, ushort usPort) =>
#if VALVE_BIG_ENDIAN
		return string.Format("{0}.{1}.{2}.{3}:{4}", unIP & 0xFFul, (unIP >> 8) & 0xFFul, (unIP >> 16) & 0xFFul, (unIP >> 24) & 0xFFul, usPort);
#else
        string.Format("{0}.{1}.{2}.{3}:{4}", (unIP >> 24) & 0xFFul, (unIP >> 16) & 0xFFul, (unIP >> 8) & 0xFFul, unIP & 0xFFul, usPort);
#endif


        public static bool operator <(servernetadr_t x, servernetadr_t y) => (x.m_unIP < y.m_unIP) || (x.m_unIP == y.m_unIP && x.m_usQueryPort < y.m_usQueryPort);

        public static bool operator >(servernetadr_t x, servernetadr_t y) => (x.m_unIP > y.m_unIP) || (x.m_unIP == y.m_unIP && x.m_usQueryPort > y.m_usQueryPort);

        public override bool Equals(object other) => other is servernetadr_t && this == (servernetadr_t)other;

        public override int GetHashCode() => this.m_unIP.GetHashCode() + this.m_usQueryPort.GetHashCode() + this.m_usConnectionPort.GetHashCode();

        public static bool operator ==(servernetadr_t x, servernetadr_t y) => (x.m_unIP == y.m_unIP) && (x.m_usQueryPort == y.m_usQueryPort) && (x.m_usConnectionPort == y.m_usConnectionPort);

        public static bool operator !=(servernetadr_t x, servernetadr_t y) => !(x == y);

        public bool Equals(servernetadr_t other) => (this.m_unIP == other.m_unIP) && (this.m_usQueryPort == other.m_usQueryPort) && (this.m_usConnectionPort == other.m_usConnectionPort);

        public int CompareTo(servernetadr_t other) => this.m_unIP.CompareTo(other.m_unIP) + this.m_usQueryPort.CompareTo(other.m_usQueryPort) + this.m_usConnectionPort.CompareTo(other.m_usConnectionPort);
    }
}

#endif // !DISABLESTEAMWORKS
