// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct SteamInventoryResult_t : System.IEquatable<SteamInventoryResult_t>, System.IComparable<SteamInventoryResult_t> {
        public static readonly SteamInventoryResult_t Invalid = new SteamInventoryResult_t(-1);
        public int m_SteamInventoryResult;

        public SteamInventoryResult_t(int value) => this.m_SteamInventoryResult = value;

        public override string ToString() => this.m_SteamInventoryResult.ToString();

        public override bool Equals(object other) => other is SteamInventoryResult_t && this == (SteamInventoryResult_t)other;

        public override int GetHashCode() => this.m_SteamInventoryResult.GetHashCode();

        public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y) => x.m_SteamInventoryResult == y.m_SteamInventoryResult;

        public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y) => !(x == y);

        public static explicit operator SteamInventoryResult_t(int value) => new SteamInventoryResult_t(value);

        public static explicit operator int(SteamInventoryResult_t that) => that.m_SteamInventoryResult;

        public bool Equals(SteamInventoryResult_t other) => this.m_SteamInventoryResult == other.m_SteamInventoryResult;

        public int CompareTo(SteamInventoryResult_t other) => this.m_SteamInventoryResult.CompareTo(other.m_SteamInventoryResult);
    }
}

#endif // !DISABLESTEAMWORKS
