// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct SteamItemInstanceID_t : System.IEquatable<SteamItemInstanceID_t>, System.IComparable<SteamItemInstanceID_t> {
        public static readonly SteamItemInstanceID_t Invalid = new SteamItemInstanceID_t(0xFFFFFFFFFFFFFFFF);
        public ulong m_SteamItemInstanceID;

        public SteamItemInstanceID_t(ulong value) => this.m_SteamItemInstanceID = value;

        public override string ToString() => this.m_SteamItemInstanceID.ToString();

        public override bool Equals(object other) => other is SteamItemInstanceID_t && this == (SteamItemInstanceID_t)other;

        public override int GetHashCode() => this.m_SteamItemInstanceID.GetHashCode();

        public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y) => x.m_SteamItemInstanceID == y.m_SteamItemInstanceID;

        public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y) => !(x == y);

        public static explicit operator SteamItemInstanceID_t(ulong value) => new SteamItemInstanceID_t(value);

        public static explicit operator ulong(SteamItemInstanceID_t that) => that.m_SteamItemInstanceID;

        public bool Equals(SteamItemInstanceID_t other) => this.m_SteamItemInstanceID == other.m_SteamItemInstanceID;

        public int CompareTo(SteamItemInstanceID_t other) => this.m_SteamItemInstanceID.CompareTo(other.m_SteamItemInstanceID);
    }
}

#endif // !DISABLESTEAMWORKS
