// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS


namespace Steamworks {
    [System.Serializable]
    public struct HHTMLBrowser : System.IEquatable<HHTMLBrowser>, System.IComparable<HHTMLBrowser> {
        public static readonly HHTMLBrowser Invalid = new HHTMLBrowser(0);
        public uint m_HHTMLBrowser;

        public HHTMLBrowser(uint value) => this.m_HHTMLBrowser = value;

        public override string ToString() => this.m_HHTMLBrowser.ToString();

        public override bool Equals(object other) => other is HHTMLBrowser && this == (HHTMLBrowser)other;

        public override int GetHashCode() => this.m_HHTMLBrowser.GetHashCode();

        public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y) => x.m_HHTMLBrowser == y.m_HHTMLBrowser;

        public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y) => !(x == y);

        public static explicit operator HHTMLBrowser(uint value) => new HHTMLBrowser(value);

        public static explicit operator uint(HHTMLBrowser that) => that.m_HHTMLBrowser;

        public bool Equals(HHTMLBrowser other) => this.m_HHTMLBrowser == other.m_HHTMLBrowser;

        public int CompareTo(HHTMLBrowser other) => this.m_HHTMLBrowser.CompareTo(other.m_HHTMLBrowser);
    }
}

#endif // !DISABLESTEAMWORKS
