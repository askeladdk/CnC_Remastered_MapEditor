// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct HTTPRequestHandle : System.IEquatable<HTTPRequestHandle>, System.IComparable<HTTPRequestHandle> {
        public static readonly HTTPRequestHandle Invalid = new HTTPRequestHandle(0);
        public uint m_HTTPRequestHandle;

        public HTTPRequestHandle(uint value) => this.m_HTTPRequestHandle = value;

        public override string ToString() => this.m_HTTPRequestHandle.ToString();

        public override bool Equals(object other) => other is HTTPRequestHandle && this == (HTTPRequestHandle)other;

        public override int GetHashCode() => this.m_HTTPRequestHandle.GetHashCode();

        public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y) => x.m_HTTPRequestHandle == y.m_HTTPRequestHandle;

        public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y) => !(x == y);

        public static explicit operator HTTPRequestHandle(uint value) => new HTTPRequestHandle(value);

        public static explicit operator uint(HTTPRequestHandle that) => that.m_HTTPRequestHandle;

        public bool Equals(HTTPRequestHandle other) => this.m_HTTPRequestHandle == other.m_HTTPRequestHandle;

        public int CompareTo(HTTPRequestHandle other) => this.m_HTTPRequestHandle.CompareTo(other.m_HTTPRequestHandle);
    }
}

#endif // !DISABLESTEAMWORKS
