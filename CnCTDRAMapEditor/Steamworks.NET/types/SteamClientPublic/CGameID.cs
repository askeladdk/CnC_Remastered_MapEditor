// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct CGameID : System.IEquatable<CGameID>, System.IComparable<CGameID> {
        public ulong m_GameID;

        public enum EGameIDType {
            k_EGameIDTypeApp = 0,
            k_EGameIDTypeGameMod = 1,
            k_EGameIDTypeShortcut = 2,
            k_EGameIDTypeP2P = 3,
        };

        public CGameID(ulong GameID) => this.m_GameID = GameID;

        public CGameID(AppId_t nAppID) {
            this.m_GameID = 0;
            this.SetAppID(nAppID);
        }

        public CGameID(AppId_t nAppID, uint nModID) {
            this.m_GameID = 0;
            this.SetAppID(nAppID);
            this.SetType(EGameIDType.k_EGameIDTypeGameMod);
            this.SetModID(nModID);
        }

        public bool IsSteamApp() => this.Type() == EGameIDType.k_EGameIDTypeApp;

        public bool IsMod() => this.Type() == EGameIDType.k_EGameIDTypeGameMod;

        public bool IsShortcut() => this.Type() == EGameIDType.k_EGameIDTypeShortcut;

        public bool IsP2PFile() => this.Type() == EGameIDType.k_EGameIDTypeP2P;

        public AppId_t AppID() => new AppId_t((uint)(this.m_GameID & 0xFFFFFFul));

        public EGameIDType Type() => (EGameIDType)((this.m_GameID >> 24) & 0xFFul);

        public uint ModID() => (uint)((this.m_GameID >> 32) & 0xFFFFFFFFul);

        public bool IsValid() {
            // Each type has it's own invalid fixed point:
            switch(this.Type()) {
            case EGameIDType.k_EGameIDTypeApp:
                return this.AppID() != AppId_t.Invalid;

            case EGameIDType.k_EGameIDTypeGameMod:
                return this.AppID() != AppId_t.Invalid && (this.ModID() & 0x80000000) != 0;

            case EGameIDType.k_EGameIDTypeShortcut:
                return (this.ModID() & 0x80000000) != 0;

            case EGameIDType.k_EGameIDTypeP2P:
                return this.AppID() == AppId_t.Invalid && (this.ModID() & 0x80000000) != 0;

            default:
                return false;
            }
        }

        public void Reset() => this.m_GameID = 0;

        public void Set(ulong GameID) => this.m_GameID = GameID;

        #region Private Setters for internal use
        private void SetAppID(AppId_t other) => this.m_GameID = (this.m_GameID & ~(0xFFFFFFul << 0)) | (((ulong)(other) & 0xFFFFFFul) << 0);

        private void SetType(EGameIDType other) => this.m_GameID = (this.m_GameID & ~(0xFFul << 24)) | (((ulong)(other) & 0xFFul) << 24);

        private void SetModID(uint other) => this.m_GameID = (this.m_GameID & ~(0xFFFFFFFFul << 32)) | ((other & 0xFFFFFFFFul) << 32);
        #endregion Private Setters for internal use

        #region Overrides
        public override string ToString() => this.m_GameID.ToString();

        public override bool Equals(object other) => other is CGameID && this == (CGameID)other;

        public override int GetHashCode() => this.m_GameID.GetHashCode();

        public static bool operator ==(CGameID x, CGameID y) => x.m_GameID == y.m_GameID;

        public static bool operator !=(CGameID x, CGameID y) => !(x == y);

        public static explicit operator CGameID(ulong value) => new CGameID(value);
        public static explicit operator ulong(CGameID that) => that.m_GameID;

        public bool Equals(CGameID other) => this.m_GameID == other.m_GameID;

        public int CompareTo(CGameID other) => this.m_GameID.CompareTo(other.m_GameID);
        #endregion Overrides
    }
}

#endif // !DISABLESTEAMWORKS
