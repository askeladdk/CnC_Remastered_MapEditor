// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2019 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if UNITY_ANDROID || UNITY_IOS || UNITY_TIZEN || UNITY_TVOS || UNITY_WEBGL || UNITY_WSA || UNITY_PS4 || UNITY_WII || UNITY_XBOXONE || UNITY_SWITCH
#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

namespace Steamworks {
    [System.Serializable]
    public struct HSteamPipe : System.IEquatable<HSteamPipe>, System.IComparable<HSteamPipe> {
        public int m_HSteamPipe;

        public HSteamPipe(int value) => this.m_HSteamPipe = value;

        public override string ToString() => this.m_HSteamPipe.ToString();

        public override bool Equals(object other) => other is HSteamPipe && this == (HSteamPipe)other;

        public override int GetHashCode() => this.m_HSteamPipe.GetHashCode();

        public static bool operator ==(HSteamPipe x, HSteamPipe y) => x.m_HSteamPipe == y.m_HSteamPipe;

        public static bool operator !=(HSteamPipe x, HSteamPipe y) => !(x == y);

        public static explicit operator HSteamPipe(int value) => new HSteamPipe(value);

        public static explicit operator int(HSteamPipe that) => that.m_HSteamPipe;

        public bool Equals(HSteamPipe other) => this.m_HSteamPipe == other.m_HSteamPipe;

        public int CompareTo(HSteamPipe other) => this.m_HSteamPipe.CompareTo(other.m_HSteamPipe);
    }
}

#endif // !DISABLESTEAMWORKS
